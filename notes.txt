<StartPage msg="Multigame App" />

w-[30%] h-12

<h1 class="mt-6 mb-8 text-white text-2xl font-extrabold">{{ msg }}</h1>



<!--<script>
const para = document.createElement("div");
para.className =
  "flex flex-wrap gap-0.5 h-screen items-center justify-center  relative";
let el =
  '<div class = "  transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
for (var k = 1; k <= 1000; k++) {
  el +=
    '<div class = " transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
}

para.innerHTML = el;
document.getElementById("myDIV").appendChild(para);
</script>
-->

<script setup>
const para = document.createElement("div");
para.className =
  "flex flex-wrap gap-0.5 h-screen items-center justify-center  relative";
let el =
  '<div class = "  transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
for (var k = 1; k <= 1000; k++) {
  el +=
    '<div class = " transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
}

para.innerHTML = el;
document.getElementById("myDIV").appendChild(para);
</script>


 {
      path: "/about",
      name: "about",
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.

      //component: () => import("../views/AboutView.vue"),
    },


    para.innerHTML = el;
let x = document.querySelector("#my");
console.log(x);
//document.querySelector("#my").appendChild(para);


mounted() {
    this.$refs.add;
  },


    methods{ popSquares() {
    for (var k = 1; k <= 1000; k++) {
    this.$refs.add
    }
  }

    }


<template>
  <ChildComponent :function="myFunction" />
</template>
export default {
  methods: {
    myFunction() {
      // ...
    }
  }
};




// ChildComponent
export default {
  created() {
    this.$emit('created');
  }
}


<template>
  <ChildComponent @created="handleCreate" />
</template>
export default {
  methods: {
    handleCreate() {
      console.log('Child has been created.');
    }
  }
};


<script>
import Modal from "../components/Modal.vue";
export default {
  components: { Modal },
  setup() {
    const isShown = ref(false);

    return { isShown };
  },
};
</script>


    const handleKeyup = (event) => {
      if (event.KeyCode === 27) {
        close();
      }
    };

    onMounted(() => document.addEventListener("keyup", handleKeyup));
    onUnmounted(() => document.removeEventListener("keyup", handleKeyup));