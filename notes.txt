
<!--<script>
const para = document.createElement("div");
para.className =
  "flex flex-wrap gap-0.5 h-screen items-center justify-center  relative";
let el =
  '<div class = "  transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
for (var k = 1; k <= 1000; k++) {
  el +=
    '<div class = " transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
}

para.innerHTML = el;
document.getElementById("myDIV").appendChild(para);
</script>
-->

<script setup>
const para = document.createElement("div");
para.className =
  "flex flex-wrap gap-0.5 h-screen items-center justify-center  relative";
let el =
  '<div class = "  transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
for (var k = 1; k <= 1000; k++) {
  el +=
    '<div class = " transition-colors duration-[1.5s] hover:duration-[0s] border-[#00FF00] h-[calc(5vw-2px)] w-[calc(5vw-2px)] md:h-[calc(4vw-2px)] md:w-[calc(4vw-2px)] lg:h-[calc(3vw-4px)] lg:w-[calc(3vw-4px)] bg-gray-900 hover:bg-[#00FF00]"></div>';
}

para.innerHTML = el;
document.getElementById("myDIV").appendChild(para);
</script>


 {
      path: "/about",
      name: "about",
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.

      //component: () => import("../views/AboutView.vue"),
    },


    para.innerHTML = el;
let x = document.querySelector("#my");
console.log(x);
//document.querySelector("#my").appendChild(para);



<template>
  <ChildComponent :function="myFunction" />
</template>
export default {
  methods: {
    myFunction() {
      // ...
    }
  }
};


deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead

 WARN  deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead
 WARN  deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated
 WARN  deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
 WARN  deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated



watchEffect(() => {
  const socket = io(process.env.VUE_APP_SOCKET_URL);
  setSocket(socket);
});

const socket = ref("null");


const socket = io(import.meta.env.VITE_VUE_APP_SOCKET_URL);

'private'

 const id = socket.id;


 io.on("connection", (socket) => {
  console.log("connected", socket.id);
  roomStart(io, socket, rooms);

  socket.on("disconnect", () => {
    console.log("disconnected", socket.id);
  });
});

C:Users/User/Documents/GitHub/router-test

 origin: ["http://localhost:5173/rpc"], methods: ["GET", "POST"] 

 const rId = roomId.value;

 .to(socket)

  ref="refId"

  
onMounted(() => {
  inputControl();
});

if (e.key === "r") {
      ResetRound();
    } else if (e.key === "1") {
      play("rock");
    } else if (e.key === "2") {
      play("paper");
    } else if (e.key === "3") {
      play("scissors");
    } else if (e.key === "4") {
      play("lizard");
    } else if (e.key === "5") {
      play("spock");
    }

    .emit("ready", function () {
    console.log("Socket now in rooms", socket.rooms);
  })

   socket.on("ready", (socket) => {
    console.log(socket.id);
  });

  const joinRoom = () => {
  let yourId = inId.value;
  if (yourId.length === 9) {
    socket.emit("send-id", yourId);
  } else {
    alert("Room id should have 9 symbols");
  }
};

nextTick().

 onchange="trackLength()"

refId.value.addEventListener("keypress", () => {
    yourId = inId.value;
    console.log(yourId);
  });